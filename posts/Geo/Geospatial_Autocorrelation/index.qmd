---
title: "Introduction to  Global and Local Measures of Spatial Autocorrelation"
subtitle: Describing the presence of systematic spatial variation in a variable. “The first law of geography Everything is related to everything else, but near things are more related than distant things.” Waldo R. Tobler ([Tobler, Waldo R. 1970](https://people.geog.ucsb.edu/~tobler/publications/pdf_docs/A-Computer-Movie.pdf))
author: "Ong Zhi Rong Jordan"
date: 2022-11-24
categories:
  - geospatial
  - sf
  - spdep
  - tmap
image: "autocorrelation.png"
toc: true
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      eval = TRUE,
                      warning = FALSE,
                      message = FALSE)
```

## Introduction

The Spatial Autocorrelation measures spatial autocorrelation based on feature locations and feature values simultaneously. Given a set of features and an associated attribute, it evaluates whether the expressed pattern is clustered, scattered, or random. The tool calculates the Moran's I index value as well as a z-score and p-value to assess the significance of this index. P-values are numerical approximations of the area under the curve for a known distribution, bounded by the test statistic.

In this study we will explore the computation of Global and Local Measure of Spatial Autocorrelation (GLSA) by using **spdep** package.

## Libraries

For this study, we will use the following packages from CRAN.

-   [`sf`](https://cloud.r-project.org/web/packages/sf/index.html) - Support for simple features, a standardized way to encode spatial vector data. Binds to 'GDAL' for reading and writing data, to 'GEOS' for geometrical operations, and to 'PROJ' for projection conversions and datum transformations. Uses by default the 's2' package for spherical geometry operations on ellipsoidal (long/lat) coordinates.
-   [`tidyverse`](https://www.tidyverse.org/packages/) - Loading the core tidyverse packages which will be used for data wrangling and visualisation.
-   [`tmap`](https://cran.r-project.org/web/packages/tmap/index.html) - Thematic maps are geographical maps in which spatial data distributions are visualized. This package offers a flexible, layer-based, and easy to use approach to create thematic maps, such as choropleths and bubble maps.
-   [`spdep`](https://cran.r-project.org/web/packages/spdep/index.html) - A collection of functions to create spatial weights matrix objects from polygon 'contiguities', from point patterns by distance and tessellations, for summarizing these objects, and for permitting their use in spatial data analysis, including regional aggregation by minimum spanning tree; a collection of tests for spatial 'autocorrelation'

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Data Preparation

Two dataset will be used for this study:

-   Hunan.shp: A shapefile of the Hunan Province that consist of all the capital
-   Hunan.csv: A csv file containing multiple attributes of each capital within Hunan

### Importing of data

We will use the *st_read* to import the shape file and *read_csv* to import the aspatial data into the R environment. We will then use a relational join *left_join* to combine the spatial and aspatial data together.

```{r, eval = FALSE}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")

hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")


hunan <- left_join(hunan,hunan2012)
```

```{r, echo = FALSE}
hunan <- readRDS("data/rds/hunan.rds")
```

## Visualisation of spatial data

For the visualisation, we will only be using `tmap` to show the distribution of GDPPC 2021.

```{r, eval=FALSE}
tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "GDDPC using Quantile classification", main.title.size = 0.7,
            main.title.fontface = "bold", main.title.position = "center")
```

## Global Spatial Autocorrelation

Before we commence with spatial autocorrelation, we need to construct the spatial weights of the study region. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area. Refer to my previous post to understand the flow of construsting the spatial weight.

### Computing Contiguity Spatial Weights

For this study, we will be using the Queen contiguity weight matrix. The code chunk below will construct the weight matrix and subsequently implement the row-standardised weight matrix using the `nb2listw()` function.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)

rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

### Global Spatial Autocorrelation: Moran's I

We will now perform Moran's I statistics testing by using the [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) from **spdep**.

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

To better understand the result, we will reference the following table.

|                                                                            |                                                                                                                                                                                                                                                                                                                                                                                                                                          |
|------------------------|------------------------------------------------|
| The p-value is not statistically significant.                              | You cannot reject the null hypothesis. It is quite possible that the spatial distribution of feature values is the result of random spatial processes. The observed spatial pattern of feature values could very well be one of many, many possible versions of complete spatial randomness (CSR).                                                                                                                                       |
| The p-value is statistically significant, and the z-score is positive.     | You may reject the null hypothesis. The spatial distribution of high values and/or low values in the dataset is more spatially clustered than would be expected if underlying spatial processes were random.                                                                                                                                                                                                                             |
| The p-value is statistically significant, and the z-score is not positive. | You may reject the null hypothesis. The spatial distribution of high values and low values in the dataset is more spatially dispersed than would be expected if underlying spatial processes were random. A dispersed spatial pattern often reflects some type of competitive process---a feature with a high value repels other features with high values; similarly, a feature with a low value repels other features with low values. |

The hypothesis:

H~0~ : The attribute being analyzed is randomly distributed among the features in your study area.

H~1~: The attribute being analyzed is **not** randomly distributed among the features in your study area.

Since the above result has a p-value below 0.05 and a positive z-score, we can conclude with statistical evidence that the attribute a not randomly distributed and the spatial distribution of high values and/or low values in the dataset is more spatially clustered

#### Computing Monte Carlo Moran's I

The code chunk below performs permutation test for Moran's I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of spdep. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

#### Visualising Monte Carlo Moran's I

We will use a density plot to visualise the output of the Monte Carlo Moran's I. First, we need to extract the `res` value and convert it into a dataframe. We then visualise the test statistic result using `geom_density` from the ggplot package.

```{r}
monte_carlo <- as.data.frame(bperm[7])

ggplot(monte_carlo, aes(x=res)) + 
  geom_density(fill="lightblue") +
  geom_vline(aes(xintercept=0.30075),
            color="blue", linetype="dashed", size=1) +
  labs(title = "Density plot of Monte Carlo Simulation of Moran's I", x = "Test Statistic", y = "Density") +
  theme_minimal() 
```

From the plot, we can see the actual Moran's I statistic (blue line) is far outside the simulated data (shaded in blue), indicating a significant evidence of positive autocorrelation.

### Global Spatial Autocorrelation: Geary's

We will now perform the Geary'c statistic testing by using the [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) function. We will also compute the Monte Carlo Geary'sc using the [`geary.mc`](https://r-spatial.github.io/spdep/reference/geary.mc.html).

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)

set.seed(1234)
gperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
gperm
```

Based on the result, the p-value is below the alpha value of 0.05 and therefore we can statistical evidence to reject the null hypothesis.

#### Visualising the Monte Carlo Geary's C

```{r}
monte_carlo_geary <- as.data.frame(gperm[7])

ggplot(monte_carlo_geary, aes(x=res)) + 
  geom_density(fill="lightblue") +
  geom_vline(aes(xintercept=0.69072),
            color="blue", linetype="dashed", size=1) +
  labs(title = "Density plot of Monte Carlo Simulation of Geary’s C", x = "Test Statistic", y = "Density") +
  theme_minimal() 
```

Unlike the Moran's I where the statistical value is located on the right side of the density graph, the test statistic for Geary's C is inversely related to Moran's I where the value less than 1 indicates positive spatial autocorrelation, while a value larger than 1 points to negative spatial autocorrelation. Therefore, based on the plot, we can conclude there is significant evidence of positive autocorrelation.

## Spatial Correlogram

A nonparametric spatial correlogram is another measure of overall spatial autocorrelation that does not rely on specifying a matrix of spatial weights. Instead, a local regression is fitted to the calculated covariances or correlations for all pairs of observations based on the distance between them. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### Compute Moran's I and Geary'C correlogram

We will utilise the sp.correlogram() function from the spdep package and compute a 6-lag spatial correlogram of GDPPC. We then use the `plot()` and `print()` function to visualise the output. The `method` function can take in three different inputs:

-   corr - correlation
-   I - Moran's I
-   C - Geary's C

We will illustrate the Moran's I correlogram.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
print(MI_corr)
```

Now, we will illustrate the Geary'C correlogram.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
print(GC_corr)
```

### Interpretation of results

From the results and plot shown above, we understand the relationship between Moran's I and Geary'C (inverse). We also can identify lag 1 and 2 with statistical evidence to have a positive autocorrelation and lag 5 and 6 to have a negative correlation with p-values below 0.05.

## Cluster and Outlier Analysis

Local Indicators of Spatial Association (LISA) is a technique that allows analysts to identify areas on the map where data values are strongly positively or negatively correlated. We will now use techniques to detect clusters and/or outliers.

### Computing local Moran's I

To compute local Moran's I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

The z-scores and pseudo p-values represent the statistical significance of the computed index values.

The code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

### Mapping the local Moran's I

We have to combine the local Moran's dataframe with the our exisiting `Hunan` spatialdataframe before plotting. We will use the `cbind()` function.

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

### Mapping local Moran's I values

Using choropleth mapping functions of tmap package, we can plot the local Moran's I values by using the code chinks below.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "Local Moran I value") +
  tm_borders(alpha = 0.5)
```

A positive value for I indicates that a feature has neighboring features with similarly high or low attribute values; this feature is part of a cluster. A negative value for I indicates that a feature has neighboring features with dissimilar values; this feature is an outlier. The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.

### Mapping local Moran's I p-values

The code chunks below produce a choropleth map of Moran's I p-values by using functions of tmap package.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### Mapping Moran's I values and p-values

It will be more useful to understand which area Moran's I value is statistically significant. We will create another dataframe with only areas that are statistically significant with a p value \< 0.05. We will then plot the overlay above the base map and identify the area with positive and negative I value.

```{r}

hunan.localMI.sub <- hunan.localMI %>%
  filter (Pr.Ii <= 0.05)

imap <- tm_shape(hunan.localMI) +
  tm_fill("white") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_shape(hunan.localMI.sub) +
  tm_fill (col = "Ii",
           style = "pretty",
           palette = "RdBu",
           title = "Local Moran I value") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_layout(main.title = "Local Moran I value for p < 0.05",
            main.title.size = 0.7,
            main.title.fontface = "bold")

imap 
```

From our plot, we are able to derive that 11 areas have I values that are statically significant, and 2 areas have negative I value which means a dissimilar features.

## Creating a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### Plotting Moran scatterplot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

In the upper right quadrant, there are cases where both the attribute value and the local average are greater than the global average. Similarly, in the lower left quadrant, there are cases where both the attribute value and the local mean are below the global mean. These conditions confirm positive spatial autocorrelation. Cases in the other two quadrants show negative spatial autocorrelation.

### Preparing LISA map classes

We will now prepare the LISA map classes. We first need to retrieve the quadrant for each area.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, we scale the GDPPC.

```{r}
DV <- scale(hunan.localMI$GDPPC)   
```

This is follow by finding the lag of the scaled GDPPC.

```{r}
C_mI <- lag.listw(rswm_q, DV)   
```

Using the Moran Scatterplot below, we filter all the area with p value < 0.05 and identify significant areas. We can see that the plot below is align with our Moran I plot where there are a total of 11 significant areas, 2 areas that are outliers (LH), and 9 areas that are clusters (7 HH and 2 LL).

```{r}
MIplot <- data.frame(cbind(DV,C_mI,localMI[,5]))
MIplot <- MIplot %>%
  filter (X3 < 0.05)
plot(x = MIplot$X1, y = MIplot$X2, main = "Moran Scatterplot PPOV", xlab = "scaled GDDPC", ylab = "Lag scaled GDPPC")
abline(h = 0, v = 0)
```

We will now then define the quadrant based on the following criteria and place non-significant Moran (p value < 0.05) in the category 0.:

```{r}
signif <- 0.05 
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMI[,5]>signif] <- 0
```

### Plotting LISA map

Once the quadrant of each area has been decided, we will now plot the LISA map using `tmap`. We will plot both the base map with the GDDPC distribution and the LISA map to better understand the relationship.

```{r}
tmap_mode("plot")
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

lisamap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1]) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5) +
  tm_layout(main.title = "LISA Map with Quadrant", main.title.size = 0.7,
            main.title.fontface = "bold", main.title.position = "center")

basemap <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "GDDPC using Quantile classification", main.title.size = 0.7,
            main.title.fontface = "bold", main.title.position = "center")

tmap_arrange (imap,lisamap,basemap)
```

Based on the map plot above, we can see that the Moran I value map provide us with insights on which areas are consider outliers or clusters. The LISA map provide us with more in-depth information on whether the outliers are HL or LH and whether the clusters are HH or LL. These attributes can further be confirmed by referencing the base map on the right.

## Hot Spot and Cold Spot Area Analysis

By grouping points of occurrence into polygons or converging points that are close to one another based on a calculated distance, Hotspot Analysis uses vectors to locate statistically significant hot spots and cold spots in your data.

### Getis and Ord's G-Statistics

The Getis and Ord's G-statistics is used to measure the degree of clustering for either high or low values. The High/Low Clustering (Getis-Ord General G) statistic is an inferential statistic, which means that the null hypothesis is used to interpret the analysis's findings. It is assumed that there is no spatial clustering of feature values when using the High/Low Clustering (General G) statistic.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

### Deriving distance-based weight matrix

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix

-   adaptive distance weight matrix

These methods were explained on the previous post and therefore will not be elaborated here.

The code chunk below is to generate the fixed distance weight matrix:

```{r}
coords <- st_centroid(st_geometry(hunan))
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords))
wm_d59 <- dnearneigh(coords, 0, 59)
wm59_lw <- nb2listw(wm_d59, style = 'W')
```

The output spatial weights object is called wm59_lw.

The code chunk below is to generate the adaptive distance weight matrix:

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn_lw <- nb2listw(knn, style = 'B')
```

## Computing Gi statistics

### 
