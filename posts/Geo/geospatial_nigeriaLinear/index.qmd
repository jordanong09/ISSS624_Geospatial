---
title: "Logistic Regression for Osun State, Nigeria Water Point"
subtitle: Understanding the implementation of Spatial Logistic Regression on real-life dataset.
author: "Ong Zhi Rong Jordan"
date: 2022-12-17
categories:
  - geospatial
  - sf
  - spdep
  - tmap
  - clustering
image: "linearregression.png"
toc: true
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      eval = TRUE,
                      warning = FALSE,
                      message = FALSE)
```

## Overview


## The Data


## Getting Started

Before we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.

The code chunks below installs and launches these R packages into R environment.

```{r}
pacman::p_load(sf, tidyverse, funModeling, blorr, corrplot, ggpubr, spdep, GWmodel, tmap, skimr, caret)
```

## Geospatial Data Wrangling

### Importing geospatial data

```{r}
Osun_wp_sf <- readRDS ("data/rds/Osun_wp_sf.rds")
Osun <- readRDS ("data/rds/Osun.rds")
```

## Exploratory Data Analysis (EDA)

In the section, you will learn how to use statistical graphics functions of **ggplot2** package to perform EDA.

### EDA using statistical graphics

```{r}
Osun_wp_sf %>%
  freq(input = "status")
```

Using 

```{r}
tm_shape(Osun) +
  tm_polygons(alpha = 0.4) +
  tm_shape(Osun_wp_sf) +
  tm_dots(col = "status",
          alpha = 0.6) +
  tm_view(set.zoom.limits = c(9,12))
```


```{r}
Osun_wp_sf %>%
  skim()
```

```{r}
Osun_wp_sf_clean <- Osun_wp_sf %>%
  filter_at (vars(status,
                  distance_to_city,
                  distance_to_primary_road,
                  distance_to_secondary_road,
                  distance_to_tertiary_road,
                  distance_to_town,
                  water_point_population,
                  local_population_1km,
                  usage_capacity,
                  is_urban,
                  water_source_clean),
             all_vars(!is.na(.))) %>%
  mutate(usage_capacity = as.factor(usage_capacity))
```


```{r}
Osun_wp<- Osun_wp_sf_clean %>%
  select(c(7,35:39,42:43, 46:47, 57)) %>%
  st_drop_geometry()
```

```{r}
cluster_vars.cor = cor(
  Osun_wp[,2:7])

corrplot.mixed(cluster_vars.cor,
               lower = "ellipse",
               upper = "number",
               t1.pos = "lt",
               diag = "l",
               t1.col = "black"
)
```


### Logistic Regression


```{r}
model <- glm (status ~ distance_to_primary_road +
                distance_to_city +
                distance_to_secondary_road +
                distance_to_tertiary_road +
                distance_to_town +
                water_point_population +
                local_population_1km +
                usage_capacity +
                is_urban +
                water_source_clean,
              data = Osun_wp_sf_clean,
              family = binomial(link = "logit"))
```

### Visualising Logistic Regression Output

Instead of using the base R report, we will use the `blr_regress()` function from the *blorr* package.

```{r}
blr_regress(model)
```

```{r}
blr_confusion_matrix(model, cutoff = 0.5)
```

### Converting to Spatial Class

```{r}
Osun_wp_sp <- Osun_wp_sf_clean %>%
  select (c(status,
                  distance_to_city,
                  distance_to_primary_road,
                  distance_to_secondary_road,
                  distance_to_tertiary_road,
                  distance_to_town,
                  water_point_population,
                  local_population_1km,
                  usage_capacity,
                  is_urban,
                  water_source_clean)) %>%
  as_Spatial()

Osun_wp_sp
```


### Calculating the optimal fixed bandwidth 

```{r}
bw.fixed <- bw.ggwr (status ~ distance_to_primary_road +
                distance_to_city +
                distance_to_secondary_road +
                distance_to_tertiary_road +
                distance_to_town +
                water_point_population +
                local_population_1km +
                usage_capacity +
                is_urban +
                water_source_clean,
              data = Osun_wp_sp,
              family = "binomial",
              approach = "AIC",
              kernel = "gaussian",
              adaptive = FALSE,
              longlat = FALSE)

bw.fixed
```


```{r}
gwlr.fixed <- ggwr.basic (status ~ distance_to_primary_road +
                distance_to_city +
                distance_to_secondary_road +
                distance_to_tertiary_road +
                distance_to_town +
                water_point_population +
                local_population_1km +
                usage_capacity +
                is_urban +
                water_source_clean,
              data = Osun_wp_sp,
              bw = bw.fixed,
              family = "binomial",
              kernel = "gaussian",
              adaptive = FALSE,
              longlat = FALSE)
```

```{r}
gwlr.fixed
```

```{r}
gwr.fixed <- as.data.frame(gwlr.fixed$SDF)
```

```{r}
gwr.fixed <- gwr.fixed %>%
  mutate (most = ifelse(
    gwr.fixed$yhat >= 0.5, T,F
  ))
```

```{r}
gwr.fixed$y <- as.factor(gwr.fixed$y)
gwr.fixed$most <- as.factor (gwr.fixed$most)
CM <- confusionMatrix(data = gwr.fixed$most, reference = gwr.fixed$y)

CM
```

```{r}
Osun_wp_sf_selected <- Osun_wp_sf_clean %>%
  select(c(ADM2_EN, ADM2_PCODE,
           ADM1_EN, ADM1_PCODE,
           status))
```

```{r}
gwr_sf.fixed <- cbind(Osun_wp_sf_selected, gwr.fixed)
```

### Visualising coefficient estimates

The code chunks below is used to create an interactive point symbol map.

```{r}
tmap_mode ("view")

prob_T <- tm_shape(Osun) +
  tm_polygons(alpha = 0.1) +
  tm_shape (gwr_sf.fixed) + 
  tm_dots (col = "yhat",
           border.col = "gray60",
           border.lwd = 1) +
  tm_view (set.zoom.limits =  c(8,14))

prob_T
```
