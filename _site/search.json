[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bringing Geographical Data to Life",
    "section": "",
    "text": "Using Static, Interactive and Statistical (SIS) Graphs to reveal the demographics and relationships of a city.\n\n\n\n\ntibble\n\n\nggstatsplot\n\n\n \n\n\n\n\nJune 8, 2022\n\n\nOng Zhi Rong Jordan\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Ong Zhi Rong Jordan",
    "section": "",
    "text": "Currently a full-time servicemen, assuming an appointment in Training & Doctrine Command (TRADOC)."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Ong Zhi Rong Jordan",
    "section": "Education",
    "text": "Education\nNanyang Technological University - NTU | Singapore Bachelor of Engineering in Computer Engineering | Aug 2013 - Aug 2016\nSingapore Management University - SMU | Singapore Master of IT in Business (MITB)| Jan 2022 - Nov 2022 (Ongoing)"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Ong Zhi Rong Jordan",
    "section": "Experience",
    "text": "Experience\nNil"
  },
  {
    "objectID": "posts/SIS Representation/SISRepresentation.html",
    "href": "posts/SIS Representation/SISRepresentation.html",
    "title": "SIS Visual Representation",
    "section": "",
    "text": "In this article, I will share how we can leverage on Static, Interactive and Statistical (SIS) graphs to conduct appropriate data visualisation and draw statistical conclusion from the data set. In this article, we will explore varios libraries such as parsetR, ggstatsplot and ggplot."
  },
  {
    "objectID": "posts/SIS Representation/SISRepresentation.html#libraries",
    "href": "posts/SIS Representation/SISRepresentation.html#libraries",
    "title": "SIS Visual Representation",
    "section": "Libraries",
    "text": "Libraries\nInstead of using the base R function such as library() or install.packages(),we will use the p_load function from the pacman package that combine these functions together. Before using the package, you will need to install the package from CRAN.\n\ninstall.packages(\"pacman\")\n\nFor this analysis, we will use the following packages from CRAN.\nparsetR - Visualize your data with interactive d3.js parallel sets with the power and convenience of an htmlwidget.\ntidyverse - Loading the core tidyverse packages which will be used for data wrangling and visualisation.\nggstatsplot - An extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\npatchwork - Combine separate ggplots into the same graphic.\n\npacman::p_load(parsetR, tidyverse, ggstatsplot, patchwork, hrbrthemes)"
  },
  {
    "objectID": "posts/SIS Representation/SISRepresentation.html#data-set",
    "href": "posts/SIS Representation/SISRepresentation.html#data-set",
    "title": "SIS Visual Representation",
    "section": "Data Set",
    "text": "Data Set\n\nTwo different data set for this analysis:\n\nParticipants.csv - Information of all participants.\nFinancialJournal.csv- Input of the participantâ€™s wages and expenses."
  },
  {
    "objectID": "posts/SIS Representation/SISRepresentation.html#data-wrangling",
    "href": "posts/SIS Representation/SISRepresentation.html#data-wrangling",
    "title": "SIS Visual Representation",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nknitr::include_graphics(\"qn1_concept.png\")\n\n\n\n\n\n\n\n\n\nparticipants <- read_csv(\"rawdata/Participants.csv\")\nfinance <- read_csv(\"rawdata/FinancialJournal.csv\")\n\n\nReducing of File Size uploading to Git\nTo reduce the requirement to upload the original data set, I will use the saveRDS function to convert my working tibble dataframe to a R data format namely .rds. We will subsequently use the readRDS function to read the data files in R.\n\nsaveRDS(participants, \"participants.rds\")\nsaveRDS(finance, \"finance.rds\")\n\n\nparticipants <- readRDS(\"data/participants.rds\")\nfinance <- readRDS(\"data/finance.rds\")"
  },
  {
    "objectID": "posts/SIS Representation/SISRepresentation.html#data-preparation",
    "href": "posts/SIS Representation/SISRepresentation.html#data-preparation",
    "title": "SIS Visual Representation",
    "section": "Data Preparation",
    "text": "Data Preparation\nThrough the data from the participants, we can identify a total of 1011 participants ad 6 different attributes. The finance data shows the timestamp of the participants log and a category column. It seems like the data is in the long format and therefore we will subsequently pivot the data table to a wide format. We can also see that household size should be a categorical data rather than a numerical data. We address these issues using the dplyr package.\n\nsummary(participants)\n\n participantId    householdSize    haveKids            age       \n Min.   :   0.0   Min.   :1.000   Mode :logical   Min.   :18.00  \n 1st Qu.: 252.5   1st Qu.:1.000   FALSE:710       1st Qu.:29.00  \n Median : 505.0   Median :2.000   TRUE :301       Median :39.00  \n Mean   : 505.0   Mean   :1.964                   Mean   :39.07  \n 3rd Qu.: 757.5   3rd Qu.:3.000                   3rd Qu.:50.00  \n Max.   :1010.0   Max.   :3.000                   Max.   :60.00  \n educationLevel     interestGroup        joviality       \n Length:1011        Length:1011        Min.   :0.000204  \n Class :character   Class :character   1st Qu.:0.240074  \n Mode  :character   Mode  :character   Median :0.477539  \n                                       Mean   :0.493794  \n                                       3rd Qu.:0.746819  \n                                       Max.   :0.999234  \n\nsummary(finance)\n\n participantId      timestamp                        category        \n Min.   :   0.0   Min.   :2022-03-01 00:00:00.00   Length:1856330    \n 1st Qu.: 222.0   1st Qu.:2022-06-14 12:30:00.00   Class :character  \n Median : 464.0   Median :2022-10-06 16:20:00.00   Mode  :character  \n Mean   : 480.8   Mean   :2022-10-07 12:36:41.13                     \n 3rd Qu.: 726.0   3rd Qu.:2023-01-29 19:10:00.00                     \n Max.   :1010.0   Max.   :2023-05-25 00:05:00.00                     \n     amount         \n Min.   :-1562.726  \n 1st Qu.:   -5.594  \n Median :   -4.000  \n Mean   :   19.922  \n 3rd Qu.:   22.856  \n Max.   : 4096.526  \n\n\nAs part of Data Preparation, I prefer to ensure my columns are well worded. This would reduce the need to reword the X and Y axis subsequently for all the plots.\n\nparticipants <- participants %>%\n  rename('Participant Id' = 'participantId', \n         'Household Size' = 'householdSize', \n         'Have Kids' = 'haveKids', \n         'Age' = 'age', \n         'Education Level' = 'educationLevel', \n         'Interest Group' = 'interestGroup', \n         'Joviality' = 'joviality')\n\n\ncolnames(participants) # verify if the columns have been renamed correctly \n\n[1] \"Participant Id\"  \"Household Size\"  \"Have Kids\"       \"Age\"            \n[5] \"Education Level\" \"Interest Group\"  \"Joviality\"      \n\n#rename value \nparticipants$`Education Level` <- sub('HighSchoolOrCollege', \n                                    'High School or College',\n                                    participants$`Education Level`)\n\nparticipants$`Household Size` <- as.factor(participants$`Household Size`)\nparticipants$`Education Level` <- factor(participants$`Education Level`, levels = c(\n  \"Low\", \"High School or College\", \"Bachelors\", \"Graduate\"), ordered = TRUE) #create factor data object to categorise the Education Level by levels.\n\nWe will now examine how many different input categories are there. There are 6 different categories and 1011 participants throughout the period of 1 year and 2 months based on the timestamp. There should be a total of 2,547,720 financial records but the total recorded data was only 1,856,330. This shows some participants might not have recorded their finance throughout the period. We will now identify participants that are not consistent in their input.\n\nunique(finance$category)\n\n[1] \"Wage\"           \"Shelter\"        \"Education\"      \"RentAdjustment\"\n[5] \"Food\"           \"Recreation\"    \n\n\nBased on our analysis of the data, there are 131 participants who have only logged in less than 12 times throughout the period of analysis. We will identify these participants as inactive and will exclude them during our analysis of the the population demographics.\n\nincome <- finance %>% \n  filter(category == 'Wage') %>% # extract only wage data\n  select(participantId, amount) %>%\n  group_by(participantId) %>%\n  summarise(count = n()) %>%\n  ungroup()\n\ninactive <- finance %>% \n  filter(category == 'Wage') %>% # extract only wage data\n  select(participantId, amount) %>%\n  group_by(participantId) %>%\n  summarise(count = n()) %>%\n  filter (count < 13) %>%\n  ungroup()\n\n\ninactivepart <- inactive$participantId\n\nactive_participants <- subset(participants, !(`Participant Id` %in% inactivepart))\n\nSince the period of study is 15 months, we will extract the average monthly wage of each active participants using the summarise function and rounding the answer to 2 decimal place.\n\nactive_finance <- subset(finance, !(participantId %in% inactivepart))\n\nactive_finance <- active_finance %>% \n  filter(category == 'Wage') %>% # extract only wage data\n  select(participantId, amount) %>%\n  group_by(participantId) %>%\n  summarise (Income = round(sum(amount)/15,2)) %>%\n  ungroup()\n\n\nactive_participants <- active_participants %>%\n  left_join (active_finance, by = c(\"Participant Id\" = \"participantId\")) %>%\n  mutate(Joviality = Joviality * 100)"
  },
  {
    "objectID": "posts/SIS Representation/SISRepresentation.html#visualisation-and-insights",
    "href": "posts/SIS Representation/SISRepresentation.html#visualisation-and-insights",
    "title": "SIS Visual Representation",
    "section": "Visualisation and Insights",
    "text": "Visualisation and Insights\n\nVisualising using Static Graph\nWe will first visualise the distribution of the different attributes.\n\ngeom_text() is used to add annotations of the count and % values for geom_bar()\nGrids and background color are removed for a cleaner look as annotations are included.\nTo choose the different colours for the graph, I use medialab to decide on the Hue colors based on the number of graphs.\n\n\nage <- ggplot (active_participants, aes (x=Age)) +\n  geom_histogram(binwidth=5, fill=\"#c96d44\", color=\"#e9ecef\", alpha=0.9) +\n    labs(title = \"Age Distribution of Active Participants\", subtitle = \"Bin Size 5\") +\n    theme_ipsum() +\n    theme(\n      plot.title = element_text(size=15), axis.title.y= element_text(angle=0)\n    )\n\nhKids <- active_participants %>%\n  ggplot(aes(x = `Have Kids`)) +\n  geom_bar(fill= '#777acd') +\n  geom_text(stat = 'count',\n           aes(label= paste0(stat(count), ', ', \n                             round(stat(count)/sum(stat(count))*100, \n                             1), '%')), vjust= -0.5, size= 3) +\n  labs(y= 'No. of\\nParticipants', title = \"Distribution of Participants \\nwith/without Kids\") +\n  theme(axis.title.y= element_text(angle=0), axis.ticks.x= element_blank(),\n        panel.background= element_blank(), axis.line= element_line(color= 'grey'))\n\n\nhousehold <- active_participants %>%\n  ggplot(aes(x = `Household Size`)) +\n   geom_bar(fill= '#7aa456') +\n  geom_text(stat = 'count',\n           aes(label= paste0(stat(count), ', ', \n                             round(stat(count)/sum(stat(count))*100, \n                             1), '%')), vjust= -0.5, size= 3) +\n  labs(y= 'No. of\\nParticipants', title = \"Distribution of Participants \\nbased on Household Size\") +\n  theme(axis.title.y= element_text(angle=0), axis.ticks.x= element_blank(),\n        panel.background= element_blank(), axis.line= element_line(color= 'grey'))\n\neducation <- active_participants %>%\n  ggplot(aes(x = `Education Level`)) +\n   geom_bar(fill= '#c65999') +\n  geom_text(stat = 'count',\n           aes(label= paste0(stat(count), ', ', \n                             round(stat(count)/sum(stat(count))*100, \n                             1), '%')), vjust= -0.5, size= 3) +\n  labs(y= 'No. of\\nParticipants', title = \"Distribution of Participants \\nbased on Education Level\") +\n  theme(axis.title.y= element_text(angle=0), axis.ticks.x= element_blank(),\n        panel.background= element_blank(), axis.line= element_line(color= 'grey'), title = element_text(size = 10))\n\n\n(age + hKids)/(household + education) #using patchwork to stitch the different graphs together\n\n\n\n\n\njoy <- ggplot (active_participants, aes (x=Joviality)) +\n  geom_histogram(binwidth=5, fill=\"#9c954d\", color=\"#e9ecef\", alpha=0.9) +\n    labs(title = \"Joviality Distribution of Active Participants\", subtitle = \"Bin Size 5\") +\n    theme_ipsum() +\n    theme(\n      plot.title = element_text(size=15), axis.title.y= element_text(angle=0)\n    )\n\nincome <- ggplot (active_participants, aes (x=Income)) +\n  geom_histogram(binwidth=1000, fill=\"#b067a3\", color=\"#e9ecef\", alpha=0.9) +\n    labs(title = \"Income Distribution of Active Participants\", subtitle = \"Bin Size 1000\") +\n    theme_ipsum() +\n    theme(\n      plot.title = element_text(size=15), axis.title.y= element_text(angle=0)\n    )\n\nincome + joy\n\n\n\n\nWe will conduct binning on our numerical data such as Age, Income and Joviality. We use the ntile function to break the values and case_when() to change the group labels accordingly.\n\nactive_participants_grouped <- active_participants %>%\n  mutate (Income_group = ntile(Income, 4)) %>%\n  mutate (Joviality_group = ntile(Joviality, 4)) %>%\n  mutate (Income_group = case_when(\n    Income_group == 1 ~ \"Low Income\",\n    Income_group == 2 ~ \"Mid-Low Income\",\n    Income_group == 3 ~ \"Mid-High Income\",\n    Income_group == 4 ~ \"High Income\"\n  )) %>%\n  mutate (Joviality_group = case_when(\n    Joviality_group == 1 ~ \"Low Joy\",\n    Joviality_group == 2 ~ \"Mid-Low Joy\",\n    Joviality_group == 3 ~ \"Mid-High Joy\",\n    Joviality_group == 4 ~ \"High Joy\"\n  ))\n\n\n\nVisualising using Interactive Graph\nWe will now analyse the data using interactive graphs such as parallel set plot. We will leverage on the parset library to provide interactive function. The interesting feature about the parset function is that it allows the user to dynamically shift the levels of the attributes (top-bottom and left-right), providing the user a more interactive visualisation of the data set.\n\nactive_participants_parset <- active_participants_grouped %>%\n  select (`Household Size`, `Have Kids`, `Education Level`, `Interest Group`, Income_group, Joviality_group)\n\nparset(active_participants_parset)\n\n\n\n\n\n\n\nVisualising using Statistical Graph\nFrom the Parset plot, we identify a few probable relationship such as Education Level to Income Level etc. We will now use statistical plot to verify our claim. The ggstatsplot library provides a suite of statistical plot to allow user to choose the plot based on its data set. For this study, since our attributes are in categorical form, I will leverage on the ggbarstats.\n\nInsights\nPearsonâ€™s \\(x^2\\)-test of independence revealed that, across 880 participants,there was a significant association between Income Level, Education Level and Joviality Level. (p-value below alpha value of 0.05). The Bayes Factor for the left analysis revealed that the data were \\(8e^{66}\\) times more probable under the alternative hypothesis as compared to the null hypothesis. This can be considered extreme evidence (Sandra Andraszewicz, 2015) in favor of the alternative hypothesis. The Bayes Factor for the right analysis revealed that the data were 23968348874 times more probable under the alternative hypothesis as compared to the null hypothesis. This can also be considered extreme evidence in favor of the alternative hypothesis.\n\nactive_participants_parset$Income_group <- factor(active_participants_parset$Income_group, levels = c(\n  \"Low Income\", \"Mid-Low Income\", \"Mid-High Income\", \"High Income\"), ordered = TRUE) #create factor data object to segment the Education Level by levels.\n\nincome <- ggbarstats(\n  data = active_participants_parset,\n  x = `Education Level`,\n  y = Income_group,\n  type = \"np\",\n  xlab = \"Income Group\"\n)\n\njoy <- ggbarstats(\n  data = active_participants_parset,\n  x = Joviality_group,\n  y = Income_group,\n  type = \"np\",\n  xlab = \"Income Group\"\n)\n\n\nincome + joy"
  },
  {
    "objectID": "posts/SIS Representation/SISRepresentation.html#conclusion",
    "href": "posts/SIS Representation/SISRepresentation.html#conclusion",
    "title": "SIS Visual Representation",
    "section": "Conclusion",
    "text": "Conclusion\nIt is important for data analyst to understand the importance of static and interactive graphs, how we should leverage these tools to provide appropriate data visualisation and subsequently use statistical graphs to draw statistical conclusion to support the hypothesis."
  }
]